<?php

namespace Enius\Bitly\Test;

use Enius\Bitly\Bitly;
use PHPUnit\Framework\TestCase;
use Symfony\Component\Dotenv\Dotenv;
use Enius\Bitly\Provider\V4\Mapping;

class ClientV4Test extends TestCase
{
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $fileNameEnv = dirname(__DIR__).'/.env';
        if (file_exists($fileNameEnv)) {
            (new Dotenv())->load($fileNameEnv);
        }
    }

    /**
     * @testdox AccessTokenMissingException
     * @expectedException Enius\Bitly\Exceptions\AccessTokenMissingException
     */
    public function testExceptionMissinToken()
    {
        Bitly::get(null)->v4();
    }

    /**
     * @testdox AccessTokenInvalidException
     * @expectedException GuzzleHttp\Exception\ClientException
     */
    public function testExceptionInvalidToken()
    {
        $client = Bitly::get('INVALID_TOKEN')->v4();
        $client->user()->retrive();
    }

    /**
     * @testdox Get Shorten
     */
    public function testShorten()
    {
        $client = Bitly::get(getenv('BITLY_ACCESS_TOKEN'))->v4();
        $shorten = $client->link()->shorten('https://www.google.com/');
        $this->assertInstanceOf(Mapping\Link\Shorten::class, $shorten);
        $this->assertNotEmpty($shorten->getCreatedAt());
    }


    /**
     * @testdox Get userInfo
     */
    public function testUserInfo()
    {
        $client = Bitly::get(getenv('BITLY_ACCESS_TOKEN'))->v4();
        $userInfo = $client->user()->retrive();
        $this->assertInstanceOf(Mapping\User\Get::class, $userInfo);
        $this->assertNotEmpty($userInfo->getCreated());
    }
}